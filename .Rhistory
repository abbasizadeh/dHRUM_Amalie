CMIN = 1)
parsvec=as.numeric(ParDF[1,])
for(i in 1:(nHrus-1)){
ParDF <- rbind(ParDF,parsvec)
}
ParDF[,1] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
ParDF[,2] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
setParamsToOnedHru(dHRUM_ptr = dhrus, as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setPTInputsToAlldHrus(dhrus, Prec = prec, Temp = temp, as.Date("1990/01/30"))
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10,
CMIN = 1)
parsvec=as.numeric(ParDF[1,])
for(i in 1:(nHrus-1)){
ParDF <- rbind(ParDF,parsvec)
}
ParDF[,1] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
ParDF[,2] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
setParamsToOnedHru(dHRUM_ptr = dhrus, as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setPTInputsToAlldHrus(dhrus, Prec = prec, Temp = temp, as.Date("1990/01/30"))
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10,
CMIN = 1)
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10,
CMIN = 1)
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
class(as.numeric(ParDF[1,]))
c(as.numeric(ParDF[1,]))
setParamsToAlldHrus(dhrus, ParsVec = c(as.numeric(ParDF[1,])), names(ParDF))
c(as.numeric(ParDF[1,]))
class(c(as.numeric(ParDF[1,])))
class(as.vector(as.numeric(ParDF[1,])))
typeof(as.vector(as.numeric(ParDF[1,])))
str(as.vector(as.numeric(ParDF[1,])))
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10 )
setParamsToAlldHrus(dHRUM_ptr = dhrus,ParsVec = as.numeric(ParDF[1,]),ParsNames =names(ParDF))
setParamsToAlldHrus(dhrus, ParsVec = c(as.numeric(ParDF[1,])), names(ParDF))
nHrus <- 10
Areas <- runif(nHrus,min = 1,max  = 10)
IdsHrus <- paste0("ID",seq(1:length(Areas)))
setGWtypeToAlldHrus(dHRUM_ptr = dhrus,gwTypes=rep("LIN_2SE",times= length(Areas)),hruIds=IdsHrus)
setSoilStorTypeToAlldHrus(dHRUM_ptr = dhrus,soilTypes=rep("PDM",times= length(Areas)),hruIds=IdsHrus)
dhrus <- initdHruModel(nHrus,Areas,IdsHrus)
prec=c(1,2,3)
temp=c(1,2,3)
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10 )
setParamsToAlldHrus(dHRUM_ptr = dhrus,ParsVec = as.numeric(ParDF[1,]),ParsNames =names(ParDF))
ParDF
nHrus <- 10
Areas <- runif(nHrus,min = 1,max  = 10)
IdsHrus <- paste0("ID",seq(1:length(Areas)))
setGWtypeToAlldHrus(dHRUM_ptr = dhrus,gwTypes=rep("LIN_2SE",times= length(Areas)),hruIds=IdsHrus)
setSoilStorTypeToAlldHrus(dHRUM_ptr = dhrus,soilTypes=rep("PDM",times= length(Areas)),hruIds=IdsHrus)
dhrus <- initdHruModel(nHrus,Areas,IdsHrus)
nHrus <- 10
Areas <- runif(nHrus,min = 1,max  = 10)
IdsHrus <- paste0("ID",seq(1:length(Areas)))
setGWtypeToAlldHrus(dHRUM_ptr = dhrus,gwTypes=rep("LIN_2SE",times= length(Areas)),hruIds=IdsHrus)
setSoilStorTypeToAlldHrus(dHRUM_ptr = dhrus,soilTypes=rep("PDM",times= length(Areas)),hruIds=IdsHrus)
dhrus <- initdHruModel(nHrus,Areas,IdsHrus)
prec=c(1,2,3)
temp=c(1,2,3)
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10,
CMIN = 1)
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setParamsToOnedHru(dHRUM_ptr = dhrus, as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
for(i in 1:(nHrus-1)){
ParDF <- rbind(ParDF,parsvec)
}
ParDF[, 1] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
ParDF[, 2] <- seq(1:nHrus)
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10,
CMIN = 1)
parsvec=as.numeric(ParDF[1,])
for(i in 1:(nHrus-1)){
ParDF <- rbind(ParDF,parsvec)
}
ParDF[, 1] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
ParDF[, 2] <- seq(1:nHrus)
ParDF
setParsToDistdHRUM(dhrus, ParDF, FALSE)
setParamsToOnedHru(dHRUM_ptr = dhrus, as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
setParsToDistdHRUM(dhrus, ParDF, FALSE)
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
setParamsToOnedHru(dHRUM_ptr = dhrus, as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setPTInputsToAlldHrus(dhrus, Prec = prec, Temp = temp, as.Date("1990/01/30"))
setParsToDistdHRUM(dhrus, ParDF, FALSE)
setPTInputsToAlldHrus(dhrus, Prec = prec, Temp = temp, as.Date("1990/01/30"))
setParamsToOnedHru(dHRUM_ptr = dhrus, as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setPTInputsToAlldHrus(dhrus, Prec = prec, Temp = temp, as.Date("1990/01/30"))
setParsToDistdHRUM(dhrus, ParDF, FALSE)
setPTInputsToAlldHrus(dhrus, Prec = prec, Temp = temp, as.Date("1990/01/30"))
setParamsToOnedHru(dHRUM_ptr = dhrus, as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
nHrus <- 10
Areas <- runif(nHrus,min = 1,max  = 10)
IdsHrus <- paste0("ID",seq(1:length(Areas)))
setGWtypeToAlldHrus(dHRUM_ptr = dhrus,gwTypes=rep("LIN_2SE",times= length(Areas)),hruIds=IdsHrus)
setSoilStorTypeToAlldHrus(dHRUM_ptr = dhrus,soilTypes=rep("PDM",times= length(Areas)),hruIds=IdsHrus)
dhrus <- initdHruModel(nHrus,Areas,IdsHrus)
prec=c(1,2,3)
nHrus <- 10
Areas <- runif(nHrus,min = 1,max  = 10)
IdsHrus <- paste0("ID",seq(1:length(Areas)))
setGWtypeToAlldHrus(dHRUM_ptr = dhrus,gwTypes=rep("LIN_2SE",times= length(Areas)),hruIds=IdsHrus)
dhrus <- initdHruModel(nHrus,Areas,IdsHrus)
setGWtypeToAlldHrus(dHRUM_ptr = dhrus,gwTypes=rep("LIN_2SE",times= length(Areas)),hruIds=IdsHrus)
setSoilStorTypeToAlldHrus(dHRUM_ptr = dhrus,soilTypes=rep("PDM",times= length(Areas)),hruIds=IdsHrus)
nHrus <- 10
Areas <- runif(nHrus,min = 1,max  = 10)
IdsHrus <- paste0("ID",seq(1:length(Areas)))
dhrus <- initdHruModel(nHrus,Areas,IdsHrus)
setGWtypeToAlldHrus(dHRUM_ptr = dhrus,gwTypes=rep("LIN_2SE",times= length(Areas)),hruIds=IdsHrus)
setSoilStorTypeToAlldHrus(dHRUM_ptr = dhrus,soilTypes=rep("PDM",times= length(Areas)),hruIds=IdsHrus)
prec=c(1,2,3)
temp=c(1,2,3)
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10,
CMIN = 1)
parsvec=as.numeric(ParDF[1,])
for(i in 1:(nHrus-1)){
ParDF <- rbind(ParDF,parsvec)
}
ParDF[, 1] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
ParDF[, 2] <- seq(1:nHrus)
setPTInputsToAlldHrus(dhrus, Prec = prec, Temp = temp, as.Date("1990/01/30"))
setParsToDistdHRUM(dhrus, ParDF, FALSE)
setParamsToOnedHru(dHRUM_ptr = dhrus, as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
# setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
# DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
read.csv(file = "C:/Users/Hossein/OneDrive/Desktop/SoiMoisture/dtaANN.csv", header = FALSE)
ANN <- read.csv(file = "C:/Users/Hossein/OneDrive/Desktop/SoiMoisture/dtaANN.csv", header = FALSE)
library(ggplot2)
ggplot(data = ANN) +
geom_line(aes(y = V1)) +
geom_line(aes(y = V2))
ggplot(data = ANN) +
geom_line(aes(V1))
names(ANN) <- c('Pred', 'Obs')
range(length(ANN$Pred))
range(1:length(ANN$Pred))
range(1,length(ANN$Pred))
1:length(ANN$Pred)
ANN$X <- 1:length(ANN$Pred)
ANN
ggplot(data = ANN, aes(x = X)) +
geom_point(aes(y = Pred, )) +
geom_line(aes(y = Obs))
ggplot(data = ANN, aes(x = X)) +
geom_point(aes(y = Pred )) +
geom_line(aes(y = Obs))
ggplot(data = ANN, aes(x = X)) +
geom_line(aes(y = Pred )) +
geom_line(aes(y = Obs))
ANN <- read.csv(file = "C:/Users/Hossein/OneDrive/Desktop/SoiMoisture/dtaANN.csv", header = FALSE)
ANN
ANN <- read.csv(file = "C:/Users/Hossein/OneDrive/Desktop/SoiMoisture/dtaANN.csv", header = FALSE)
ANN
names(ANN) <- c('Pred', 'Obs')
ANN$X <- 1:length(ANN$Pred)
ggplot(data = ANN, aes(x = X)) +
geom_line(aes(y = Pred )) +
geom_line(aes(y = Obs))
ggplot(data = ANN, aes(x = X)) +
geom_line(aes(y = Pred )) +
geom_line(aes(y = Obs), color = "red")
cc <- c("Pred" = "bule", "Obs" = "red")
ggplot(data = ANN, aes(x = X)) +
geom_line(aes(y = Pred, color = "Pred" )) +
geom_line(aes(y = Obs, color = "Obs")) +
theme("")
ANN <- read.csv(file = "C:/Users/Hossein/OneDrive/Desktop/SoiMoisture/dtaANN.csv", header = FALSE)
names(ANN) <- c('Pred', 'Obs')
ANN$X <- 1:length(ANN$Pred)
cc <- c("Pred" = "bule", "Obs" = "red")
ggplot(data = ANN, aes(x = X)) +
geom_line(aes(y = Pred, color = "Pred" )) +
geom_line(aes(y = Obs, color = "Obs"))
ggplot(data = ANN, aes(x = X)) +
geom_line(aes(y = Pred, color = "Pred" ), size = 1) +
geom_line(aes(y = Obs, color = "Obs"), size = 1)
ANN2 <- read.csv(file = "C:/Users/Hossein/OneDrive/Desktop/SoiMoisture/dtaANN_Sigmoid.csv", header = FALSE)
names(ANN2) <- c('Pred', 'Obs')
ANN2$X <- 1:length(ANN$Pred)
cc <- c("Pred" = "bule", "Obs" = "red")
ggplot(data = ANN2, aes(x = X)) +
geom_line(aes(y = Pred, color = "Pred" ), size = 1) +
geom_line(aes(y = Obs, color = "Obs"), size = 1)
ggplot(data = ANN2, aes(x = X)) +
geom_line(aes(y = Pred, color = "Pred" ), size = 1) +
geom_line(aes(y = Obs, color = "Obs"), size = 1) +
ggtitle("Simoiod Activation Function")
ggplot(data = ANN, aes(x = X)) +
geom_line(aes(y = Pred, color = "Pred" ), size = 1) +
geom_line(aes(y = Obs, color = "Obs"), size = 1) +
ggtitle("Rectifier Activation Function")
library(fst)
library(reshape2)
library(dplyr)
library(data.table)
library(sf)
library(ggplot2)
library(raster)
library(terra)
library(rgdal)
ANN2 <- read.csv(file = "C:/Users/Hossein/OneDrive/Desktop/SoiMoisture/dtaANN_Sigmoid.csv", header = FALSE)
names(ANN2) <- c('Pred', 'Obs')
ANN2$X <- 1:length(ANN$Pred)
cc <- c("Pred" = "bule", "Obs" = "red")
ggplot(data = ANN2, aes(x = X)) +
geom_line(aes(y = Pred, color = "Pred" ), size = 1) +
geom_line(aes(y = Obs, color = "Obs"), size = 1) +
ggtitle("Sigmoid Activation Function")
ggplot(data = ANN2, aes(x = X)) +
geom_line(aes(y = Pred, color = "Pred" ), size = 1) +
geom_line(aes(y = Obs, color = "Obs"), size = 1) +
ggtitle("Sigmoid Activation Function")
ANN2 <- read.csv(file = "C:/Users/Hossein/OneDrive/Desktop/SoiMoisture/dtaANN_Sigmoid.csv", header = FALSE)
names(ANN2) <- c('Pred', 'Obs')
ANN2$X <- 1:length(ANN$Pred)
ANN2$X <- 1:length(ANN2$Pred)
cc <- c("Pred" = "bule", "Obs" = "red")
ggplot(data = ANN2, aes(x = X)) +
geom_line(aes(y = Pred, color = "Pred" ), size = 1) +
geom_line(aes(y = Obs, color = "Obs"), size = 1) +
ggtitle("Sigmoid Activation Function")
# Plotting data after running the ANN in Python
ANN <- read.csv(file = "C:/Users/Hossein/OneDrive/Desktop/SoiMoisture/dtaANN.csv", header = FALSE)
names(ANN) <- c('Pred', 'Obs')
ANN$X <- 1:length(ANN$Pred)
cc <- c("Pred" = "bule", "Obs" = "red")
ggplot(data = ANN, aes(x = X)) +
geom_line(aes(y = Pred, color = "Pred" ), size = 1) +
geom_line(aes(y = Obs, color = "Obs"), size = 1) +
ggtitle("Rectifier Activation Function")
library(fst)
library(dplyr)
library(data.table)
library(ggplot2)
library(cowplot)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
setwd("..")
setwd("..")
getwd()
library(rstudioapi)
setwd(paste0(dirname(getActiveDocumentContext()$path),"/dHRUM_setup/inputs/Soil_input_data"))
getwd()
library(fst)
library(dplyr)
library(data.table)
library(ggplot2)
library(cowplot)
library(rstudioapi)
setwd(paste0(dirname(getActiveDocumentContext()$path),"/dHRUM_setup/inputs/Soil_input_data"))
getwd()
GroundWater <- as.data.table(read.fst("vrty.fst")) %>% dcast(ID + date ~ variable, value.var = "value")
Smoisture <- as.data.table(read.fst("vlhkost_od_lukase.fst")) %>% dcast(ID + date ~ variable, value.var = "value")
# BP
################################################
################################################
dta_BP <- as.data.table(readRDS ("D:/project/Setups_For_Dist_Model/inputs/PT_intput_data/BP_D_FG_2021.rds"))
P1_BP <- dta_BP[HruId == 8, ]
names(P1_BP) <- c('date', 'HruId', 'P', 'T')
GW_BP_1 <- GroundWater[ID == '901288001062294',]
SM_BP_11 <- Smoisture[ID =='94206026']
SM_BP_12 <- Smoisture[ID =='94206027']
GwSm_BP1 <- merge(GW_BP_1, SM_BP_11, by ='date') %>%
merge(SM_BP_12, by = 'date') %>%
merge(P1_BP, by = 'date')
Pp <-ggplot(GwSm_BP1) +
geom_bar(aes(x = date, y = P), stat="identity", col = "blue") +
scale_y_reverse() +
xlab(NULL) + ggtitle("BP I/4")
GWp <- ggplot(GwSm_BP1) +
geom_line(aes(date, hladina)) +
xlab(NULL)
SMp <- ggplot(GwSm_BP1) +
geom_line(aes(date, vlhkost.x), color = 'red') +
geom_line(aes(date, vlhkost.y)) +
xlab(NULL)
plot_grid(Pp, SMp, GWp, ncol = 1, align = "v", rel_heights = c(1.5, 3))
P2_BP <- dta_BP[HruId == 3, ]
names(P2_BP) <- c('date', 'HruId', 'P', 'T')
GW_BP_2 <- GroundWater[ID == '901288001062279',]
SM_BP_21 <- Smoisture[ID =='94206022']
SM_BP_22 <- Smoisture[ID =='94206023']
GwSm_BP2 <- merge(GW_BP_2, SM_BP_21, by ='date') %>%
merge(SM_BP_22, by = 'date') %>%
merge(P2_BP, by = 'date')
Pp_BP2 <-ggplot(GwSm_BP2) +
geom_bar(aes(x = date, y = P), stat="identity", col = "blue") +
scale_y_reverse() +
xlab(NULL) + ggtitle("BP II/3")
GWp_BP2 <- ggplot(GwSm_BP2) +
geom_line(aes(date, hladina)) +
xlab(NULL)
SMp_BP2 <- ggplot(GwSm_BP2) +
geom_line(aes(date, vlhkost.x), color = 'red') +
geom_line(aes(date, vlhkost.y)) +
xlab(NULL)
plot_grid(Pp_BP2, SMp_BP2, GWp_BP2, ncol = 1, align = "v", rel_heights = c(1.5, 3))
################################################
P3_BP <- dta_BP[HruId == 3, ]
names(P3_BP) <- c('date', 'HruId', 'P', 'T')
GW_BP_3 <- GroundWater[ID == '901288001062282',]
SM_BP_31 <- Smoisture[ID =='93148342']
SM_BP_32 <- Smoisture[ID =='93148349']
SM_BP_33 <- Smoisture[ID =='93148351']
GwSm_BP3 <- merge(GW_BP_3, SM_BP_33, by ='date') %>%
# merge(SM_BP_33, by = 'date') %>%
merge(P3_BP, by = 'date')
Pp_BP3 <-ggplot(GwSm_BP3) +
geom_bar(aes(x = date, y = P), stat="identity", col = "blue") +
scale_y_reverse() +
xlab(NULL) + ggtitle('BP III/2')
GWp_BP3 <- ggplot(GwSm_BP3) +
geom_line(aes(date, hladina)) +
xlab(NULL)
SMp_BP3 <- ggplot(GwSm_BP3) +
geom_line(aes(date, vlhkost), color = 'red') +
# geom_line(aes(date, vlhkost.y)) +
xlab(NULL)
plot_grid(Pp_BP3, SMp_BP3, GWp_BP3, ncol = 1, align = "v", rel_heights = c(1.5, 3))
library(data.table)
library(ggplot2)
setwd('D:/Project/Amalie_Paper')
getwd()
# the directory of the downloaded csv file
Files <- list.files('./GWdata')
FilePath <- paste0('./GWdata/', Files)
library(rstudioapi)
dirname(getActiveDocumentContext()$path)
setwd(dirname(getActiveDocumentContext()$path))
getwd()
# the directory of the downloaded csv file
Files <- list.files('./GWdata')
FilePath <- paste0('./GWdata/', Files)
# reading csv files and storing them into a list (GW_TSs)
GW_TSs <- lapply(FilePath, read.csv)
GW_TSs <- lapply(GW_TSs, as.data.table)
# function for decomposing Time column into date and time columns
# Time column format: 2022-05-10 12:51:22
FUN = function(x){
x$date <- as.Date(x$Time)
x$Time <- format(as.POSIXct(x$Time), format = '%H:%M')
return(x)}
# extracting the sensors' IDs
Name <- substr(x = Files, start = 1, stop = 15)
for(i in 1:length(Files)){
GW_TSs[[i]] <- FUN(GW_TSs[[i]])
GW_TSs[[i]]$day <- lubridate::day(GW_TSs[[i]]$date)
GW_TSs[[i]]$month <- lubridate::month(GW_TSs[[i]]$date)
GW_TSs[[i]]$year <- lubridate::year(GW_TSs[[i]]$date)
GW_TSs[[i]]$ID <- rep(Name[i], length(GW_TSs[[i]]$day))
names(GW_TSs[[i]]) <- c('Time', 'value', 'date', 'day', 'month', 'year','ID')
}
# the same procedure for '9/15/2021 11:11' format
Files2 <- list.files('./GWdata2')
FilePath2 <- paste0('./GWdata2/', Files2)
GW_TSs2 <- lapply(FilePath2, read.csv)
GW_TSs2 <- lapply(GW_TSs2, as.data.table)
FUN2 = function(x){
x$date <- as.Date(x$Time, format = "%m/%d/%y")
x$Time <- format(as.POSIXct(x$Time, tryFormats = "%m/%d/%Y %H:%M"),
format = '%H:%M')
return(x)}
Name2 <- substr(x = Files2, start = 1, stop = 15)
for(i in 1:length(Files2)){
GW_TSs[[length(Files)+i]] <- FUN2(GW_TSs2[[i]])
GW_TSs[[length(Files)+i]]$day <- lubridate::day(GW_TSs[[length(Files)+i]]$date)
GW_TSs[[length(Files)+i]]$month <- lubridate::month(GW_TSs[[length(Files)+i]]$date)
GW_TSs[[length(Files)+i]]$year <- lubridate::year(GW_TSs[[length(Files)+i]]$date)
GW_TSs[[length(Files)+i]]$ID <- rep(Name[i], length(GW_TSs[[length(Files)+i]]$day))
names(GW_TSs[[length(Files)+i]]) <- c('Time', 'value', 'date', 'day', 'month', 'year','ID')
}
# checking the columns' configuration
GW_TSs[[1]]
GW_TSs[[45]]
for(i in 1:length(Files2)){
GW_TSs[[length(Files)+i]] <- FUN2(GW_TSs2[[i]])
GW_TSs[[length(Files)+i]]$day <- lubridate::day(GW_TSs2[[length(Files)+i]]$date)
GW_TSs[[length(Files)+i]]$month <- lubridate::month(GW_TSs2[[length(Files)+i]]$date)
GW_TSs[[length(Files)+i]]$year <- lubridate::year(GW_TSs2[[length(Files)+i]]$date)
GW_TSs[[length(Files)+i]]$ID <- rep(Name[i], length(GW_TSs2[[length(Files)+i]]$day))
names(GW_TSs[[length(Files)+i]]) <- c('Time', 'value', 'date', 'day', 'month', 'year','ID')
}
GW_TSs2
GW_TSs2[[1]]
GW_TSs2[[1]]$Time
GW_TSs2[[1]]$Time[1]
"/" in GW_TSs2[[1]]$Time[1]
"/" %in% GW_TSs2[[1]]$Time[1]
"10" %in% GW_TSs2[[1]]$Time[1]
grepl("/", GW_TSs2[[1]]$Time[1])
head(GW_TSs2[[1]]$Time[1])
head(GW_TSs2[[1]])
library(data.table)
library(ggplot2)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
getwd()
# the directory of the downloaded csv file
Files <- list.files('./GWdata')
FilePath <- paste0('./GWdata/', Files)
# reading csv files and storing them into a list (GW_TSs)
GW_TSs <- lapply(FilePath, read.csv)
GW_TSs <- lapply(GW_TSs, as.data.table)
# function for decomposing Time column into date and time columns
# Time column format: 2022-05-10 12:51:22
FUN = function(x){
if(grepl("/", x$Time)){
x$date <- as.Date(x$Time, format = "%m/%d/%y")
x$Time <- format(as.POSIXct(x$Time, tryFormats = "%m/%d/%Y %H:%M"),
format = '%H:%M')
}else{
x$date <- as.Date(x$Time)
x$Time <- format(as.POSIXct(x$Time), format = '%H:%M')
}
return(x)}
# extracting the sensors' IDs
Name <- substr(x = Files, start = 1, stop = 15)
for(i in 1:length(Files)){
GW_TSs[[i]] <- FUN(GW_TSs[[i]])
GW_TSs[[i]]$day <- lubridate::day(GW_TSs[[i]]$date)
GW_TSs[[i]]$month <- lubridate::month(GW_TSs[[i]]$date)
GW_TSs[[i]]$year <- lubridate::year(GW_TSs[[i]]$date)
GW_TSs[[i]]$ID <- rep(Name[i], length(GW_TSs[[i]]$day))
names(GW_TSs[[i]]) <- c('Time', 'value', 'date', 'day', 'month', 'year','ID')
}
Name
# function for decomposing Time column into date and time columns
# Time column format: 2022-05-10 12:51:22
FUN = function(x){
if(grepl("/", x$Time[1])){
x$date <- as.Date(x$Time, format = "%m/%d/%y")
x$Time <- format(as.POSIXct(x$Time, tryFormats = "%m/%d/%Y %H:%M"),
format = '%H:%M')
}else{
x$date <- as.Date(x$Time)
x$Time <- format(as.POSIXct(x$Time), format = '%H:%M')
}
return(x)}
# extracting the sensors' IDs
Name <- substr(x = Files, start = 1, stop = 15)
for(i in 1:length(Files)){
GW_TSs[[i]] <- FUN(GW_TSs[[i]])
GW_TSs[[i]]$day <- lubridate::day(GW_TSs[[i]]$date)
GW_TSs[[i]]$month <- lubridate::month(GW_TSs[[i]]$date)
GW_TSs[[i]]$year <- lubridate::year(GW_TSs[[i]]$date)
GW_TSs[[i]]$ID <- rep(Name[i], length(GW_TSs[[i]]$day))
names(GW_TSs[[i]]) <- c('Time', 'value', 'date', 'day', 'month', 'year','ID')
}
# checking the columns' configuration
GW_TSs[[1]]
GW_TSs[[45]]
# calculating daily Groundwater level (mean value of sub-daily time scale)
GW_TSs_daily <- list()
for (i in 1:length(GW_TSs)) {
GW_TSs_daily[[i]] <- GW_TSs[[i]][, mean(value), by = .(day, month, year, ID)]
GW_TSs_daily[[i]]$date <- as.Date(with(GW_TSs_daily[[i]], paste(year, month, day,sep="-")), "%Y-%m-%d")
GW_TSs_daily[[i]]$day <- NULL
GW_TSs_daily[[i]]$month <- NULL
GW_TSs_daily[[i]]$year <- NULL
names(GW_TSs_daily[[i]]) <- c('ID', 'value', 'date')
}
GW_TSs_daily[[1]]
GW_TSs_daily
# plotting
dta <- data.frame(GW_TSs_daily[[1]])
for (i in 2:45){
dta <- rbind(dta ,data.frame(GW_TSs_daily[[i]]))
}
ggplot(data = dta) + geom_line(aes(x = date, y = value)) + facet_wrap(~ID, ncol = 5)
ggplot(data = dta) + geom_line(aes(x = date, y = value, color = ID)) +
theme(legend.position="none")
