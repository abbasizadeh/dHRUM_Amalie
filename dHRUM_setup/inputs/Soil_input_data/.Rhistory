parsvec=as.numeric(ParDF[1,])
for(i in 1:(nHrus-1)){
ParDF <- rbind(ParDF,parsvec)
}
ParDF[,1] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
ParDF[,2] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setParamsToOnedHru(dHRUM_ptr = dhrus,as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
nHrus <- 10
Areas <- runif(nHrus,min = 1,max  = 10)
IdsHrus <- paste0("ID",seq(1:length(Areas)))
dhrus <- initdHruModel(nHrus,Areas,IdsHrus)
setGWtypeToAlldHrus(dHRUM_ptr = dhrus,gwTypes=rep("LIN_2SE",times= length(Areas)),hruIds=IdsHrus)
setSoilStorTypeToAlldHrus(dHRUM_ptr = dhrus,soilTypes=rep("PDM",times= length(Areas)),hruIds=IdsHrus)
prec=c(1,2,3)
temp=c(1,2,3)
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10,
CMIN = 1)
parsvec=as.numeric(ParDF[1,])
for(i in 1:(nHrus-1)){
ParDF <- rbind(ParDF,parsvec)
}
ParDF[,1] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
ParDF[,2] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
setParamsToOnedHru(dHRUM_ptr = dhrus, as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
nHrus <- 10
Areas <- runif(nHrus,min = 1,max  = 10)
IdsHrus <- paste0("ID",seq(1:length(Areas)))
dhrus <- initdHruModel(nHrus,Areas,IdsHrus)
setGWtypeToAlldHrus(dHRUM_ptr = dhrus,gwTypes=rep("LIN_2SE",times= length(Areas)),hruIds=IdsHrus)
setSoilStorTypeToAlldHrus(dHRUM_ptr = dhrus,soilTypes=rep("PDM",times= length(Areas)),hruIds=IdsHrus)
prec=c(1,2,3)
temp=c(1,2,3)
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10,
CMIN = 1)
parsvec=as.numeric(ParDF[1,])
for(i in 1:(nHrus-1)){
ParDF <- rbind(ParDF,parsvec)
}
ParDF[,1] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
ParDF[,2] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
setParamsToOnedHru(dHRUM_ptr = dhrus, as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setPTInputsToAlldHrus(dhrus, Prec = prec, Temp = temp, as.Date("1990/01/30"))
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10,
CMIN = 1)
parsvec=as.numeric(ParDF[1,])
for(i in 1:(nHrus-1)){
ParDF <- rbind(ParDF,parsvec)
}
ParDF[,1] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
ParDF[,2] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
setParamsToOnedHru(dHRUM_ptr = dhrus, as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setPTInputsToAlldHrus(dhrus, Prec = prec, Temp = temp, as.Date("1990/01/30"))
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10,
CMIN = 1)
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10,
CMIN = 1)
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
class(as.numeric(ParDF[1,]))
c(as.numeric(ParDF[1,]))
setParamsToAlldHrus(dhrus, ParsVec = c(as.numeric(ParDF[1,])), names(ParDF))
c(as.numeric(ParDF[1,]))
class(c(as.numeric(ParDF[1,])))
class(as.vector(as.numeric(ParDF[1,])))
typeof(as.vector(as.numeric(ParDF[1,])))
str(as.vector(as.numeric(ParDF[1,])))
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10 )
setParamsToAlldHrus(dHRUM_ptr = dhrus,ParsVec = as.numeric(ParDF[1,]),ParsNames =names(ParDF))
setParamsToAlldHrus(dhrus, ParsVec = c(as.numeric(ParDF[1,])), names(ParDF))
nHrus <- 10
Areas <- runif(nHrus,min = 1,max  = 10)
IdsHrus <- paste0("ID",seq(1:length(Areas)))
setGWtypeToAlldHrus(dHRUM_ptr = dhrus,gwTypes=rep("LIN_2SE",times= length(Areas)),hruIds=IdsHrus)
setSoilStorTypeToAlldHrus(dHRUM_ptr = dhrus,soilTypes=rep("PDM",times= length(Areas)),hruIds=IdsHrus)
dhrus <- initdHruModel(nHrus,Areas,IdsHrus)
prec=c(1,2,3)
temp=c(1,2,3)
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10 )
setParamsToAlldHrus(dHRUM_ptr = dhrus,ParsVec = as.numeric(ParDF[1,]),ParsNames =names(ParDF))
ParDF
nHrus <- 10
Areas <- runif(nHrus,min = 1,max  = 10)
IdsHrus <- paste0("ID",seq(1:length(Areas)))
setGWtypeToAlldHrus(dHRUM_ptr = dhrus,gwTypes=rep("LIN_2SE",times= length(Areas)),hruIds=IdsHrus)
setSoilStorTypeToAlldHrus(dHRUM_ptr = dhrus,soilTypes=rep("PDM",times= length(Areas)),hruIds=IdsHrus)
dhrus <- initdHruModel(nHrus,Areas,IdsHrus)
nHrus <- 10
Areas <- runif(nHrus,min = 1,max  = 10)
IdsHrus <- paste0("ID",seq(1:length(Areas)))
setGWtypeToAlldHrus(dHRUM_ptr = dhrus,gwTypes=rep("LIN_2SE",times= length(Areas)),hruIds=IdsHrus)
setSoilStorTypeToAlldHrus(dHRUM_ptr = dhrus,soilTypes=rep("PDM",times= length(Areas)),hruIds=IdsHrus)
dhrus <- initdHruModel(nHrus,Areas,IdsHrus)
prec=c(1,2,3)
temp=c(1,2,3)
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10,
CMIN = 1)
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setParamsToOnedHru(dHRUM_ptr = dhrus, as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
for(i in 1:(nHrus-1)){
ParDF <- rbind(ParDF,parsvec)
}
ParDF[, 1] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
ParDF[, 2] <- seq(1:nHrus)
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10,
CMIN = 1)
parsvec=as.numeric(ParDF[1,])
for(i in 1:(nHrus-1)){
ParDF <- rbind(ParDF,parsvec)
}
ParDF[, 1] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
ParDF[, 2] <- seq(1:nHrus)
ParDF
setParsToDistdHRUM(dhrus, ParDF, FALSE)
setParamsToOnedHru(dHRUM_ptr = dhrus, as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
setParsToDistdHRUM(dhrus, ParDF, FALSE)
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
setParamsToOnedHru(dHRUM_ptr = dhrus, as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setPTInputsToAlldHrus(dhrus, Prec = prec, Temp = temp, as.Date("1990/01/30"))
setParsToDistdHRUM(dhrus, ParDF, FALSE)
setPTInputsToAlldHrus(dhrus, Prec = prec, Temp = temp, as.Date("1990/01/30"))
setParamsToOnedHru(dHRUM_ptr = dhrus, as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setPTInputsToAlldHrus(dhrus, Prec = prec, Temp = temp, as.Date("1990/01/30"))
setParsToDistdHRUM(dhrus, ParDF, FALSE)
setPTInputsToAlldHrus(dhrus, Prec = prec, Temp = temp, as.Date("1990/01/30"))
setParamsToOnedHru(dHRUM_ptr = dhrus, as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
nHrus <- 10
Areas <- runif(nHrus,min = 1,max  = 10)
IdsHrus <- paste0("ID",seq(1:length(Areas)))
setGWtypeToAlldHrus(dHRUM_ptr = dhrus,gwTypes=rep("LIN_2SE",times= length(Areas)),hruIds=IdsHrus)
setSoilStorTypeToAlldHrus(dHRUM_ptr = dhrus,soilTypes=rep("PDM",times= length(Areas)),hruIds=IdsHrus)
dhrus <- initdHruModel(nHrus,Areas,IdsHrus)
prec=c(1,2,3)
nHrus <- 10
Areas <- runif(nHrus,min = 1,max  = 10)
IdsHrus <- paste0("ID",seq(1:length(Areas)))
setGWtypeToAlldHrus(dHRUM_ptr = dhrus,gwTypes=rep("LIN_2SE",times= length(Areas)),hruIds=IdsHrus)
dhrus <- initdHruModel(nHrus,Areas,IdsHrus)
setGWtypeToAlldHrus(dHRUM_ptr = dhrus,gwTypes=rep("LIN_2SE",times= length(Areas)),hruIds=IdsHrus)
setSoilStorTypeToAlldHrus(dHRUM_ptr = dhrus,soilTypes=rep("PDM",times= length(Areas)),hruIds=IdsHrus)
nHrus <- 10
Areas <- runif(nHrus,min = 1,max  = 10)
IdsHrus <- paste0("ID",seq(1:length(Areas)))
dhrus <- initdHruModel(nHrus,Areas,IdsHrus)
setGWtypeToAlldHrus(dHRUM_ptr = dhrus,gwTypes=rep("LIN_2SE",times= length(Areas)),hruIds=IdsHrus)
setSoilStorTypeToAlldHrus(dHRUM_ptr = dhrus,soilTypes=rep("PDM",times= length(Areas)),hruIds=IdsHrus)
prec=c(1,2,3)
temp=c(1,2,3)
ParDF = data.frame( B_SOIL = 1.6, C_MAX = 100, B_EVAP = 2,  KS = 0.1, KF = 0.2, ADIV = 0.3, CDIV = 0.03,
SDIV = 0.03, CAN_ST = 2, STEM_ST = 2, CSDIV = 0.3, TETR = 5, DDFA = 0.5, TMEL = 0, RETCAP = 10,
CMIN = 1)
parsvec=as.numeric(ParDF[1,])
for(i in 1:(nHrus-1)){
ParDF <- rbind(ParDF,parsvec)
}
ParDF[, 1] <- seq(1:nHrus)
setParsToDistdHRUM(dhrus, ParDF, FALSE)
ParDF[, 2] <- seq(1:nHrus)
setPTInputsToAlldHrus(dhrus, Prec = prec, Temp = temp, as.Date("1990/01/30"))
setParsToDistdHRUM(dhrus, ParDF, FALSE)
setParamsToOnedHru(dHRUM_ptr = dhrus, as.numeric(ParDF[1,]), ParsNames = names(ParDF),0)
# setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
# DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setPTDateInputsToAlldHrus(dhrus, Prec = prec, Temp = temp,
DateVec = as.Date(c("1990/01/30","1990/01/31","1990/02/01")))
setParamsToAlldHrus(dhrus, ParsVec = as.numeric(ParDF[1,]), names(ParDF))
setwd("C:/Users/Hossein/OneDrive/Desktop/Machine+Learning+A-Z+(Codes+and+Datasets)/Machine Learning A-Z (Codes and Datasets)/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)/R")
setwd("D:/Liberal_study/Mashine_Learning/Machine+Learning+A-Z+(Codes+and+Datasets)/Machine Learning A-Z (Codes and Datasets)/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)/R")
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset
head(dataset)
dataset = dataset[4:14]
head(dataset)
as.numeric(factor(dataset$Geography, levels = c('France', 'Spain', 'Germany'), labels = c(1, 2, 3)))
# Encoding the categorical variables as factors
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
head(dataset)
head(dataset)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
split
training_set
test_set = subset(dataset, split == FALSE)
test_set
training_set[-11]
head(training_set[-11])
head(training_set[-1])
head(training_set[-10])
head( scale(training_set[-11]))
# Feature Scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
model = h2o.deeplearning(y = 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(5,5),
epochs = 100,
train_samples_per_iteration = -2)
# Predicting the Test set results
y_pred = h2o.predict(model, newdata = as.h2o(test_set[-11]))
y_pred = (y_pred > 0.5)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
h2o.shutdown()
library(reshape2)
library(fst)
library(reshape2)
install.packages(c("corrr", "dplyr", "DT", "dtplyr", "htmltools", "sf", "shiny", "terra", "tibble", "tidyverse", "timeDate"))
library(fst)
library(reshape2)
library(dplyr)
library(data.table)
library(sf)
library(ggplot2)
library(raster)
library(terra)
library(rgdal)
setwd("D:/project/Setups_For_Dist_Model/inputs/Soil_input_data")
getwd()
# Soil Moisture data; (Percentage and coordinate)
Smoisture <- as.data.table(read.fst("vlhkost_od_lukase.fst")) %>% dcast(ID + date ~ variable, value.var = "value")
Smoisture
# Soil Moisture data; (Percentage and coordinate)
Smoisture <- as.data.table(read.fst("vlhkost_od_lukase.fst")) %>% dcast(ID + date ~ variable, value.var = "value")
Smoisture
Smoisture <- as.data.table(read.fst("vlhkost_od_lukase.fst"))
Smoisture
setwd("D:/project/Setups_For_Dist_Model/inputs/Soil_input_data")
getwd()
Smoisture <- as.data.table(read.fst("vlhkost_od_lukase.fst")) %>% dcast(ID + date ~ variable, value.var = "value")
Smoisture
Smoisture <- as.data.table(read.fst("vlhkost_od_lukase.fst")) %>% dcast(ID + date ~ variable, value.var = "value")
ggolot(data = Smoisture) +
geom_line(aes(x = date, y = vlhkost, color = ID))
ggplot(data = Smoisture) +
geom_line(aes(x = date, y = vlhkost, color = ID))
ggplot(data = Smoisture) +
geom_line(aes(x = date, y = vlhkost, color = ID)) +
theme(legend.position = 'none')
SMcoord <- read.csv("soil_moisture_sensor_info.csv")
Smoisture_mean <- Smoisture[, mean(vlhkost), by = ID][, ID:= as.numeric(as.character(ID))]
Soil_Moisture <- merge(Smoisture_mean, SMcoord, by = "ID" )
names(Soil_Moisture) <-  c("ID", "vlhkost", "X", "Y")
rm(Smoisture, SMcoord, Smoisture_mean)
Soil_Moisture
# Soil Moisture data; (Percentage and coordinate)
Smoisture <- as.data.table(read.fst("vlhkost_od_lukase.fst")) %>% dcast(ID + date ~ variable, value.var = "value")
Smoisture <- as.data.table(Smoisture)
Smoisture$ID <- as.numeric(as.character(Smoisture$ID))
SMcoord <- read.csv("soil_moisture_sensor_info.csv")
Smoisture_mean <- Smoisture[, mean(vlhkost), by = ID][, ID:= as.numeric(as.character(ID))]
Soil_Moisture <- merge(Smoisture_mean, SMcoord, by = "ID" )
names(Soil_Moisture) <-  c("ID", "vlhkost", "X", "Y")
Soil_Moisture
SM_TS <- dtaSM[,mean(vlhkost), by = .(OBJECTID, date)]
# Create shape file of the Soil Moisture points
SM_shapeFile <- st_as_sf(Soil_Moisture, coords = c("X", "Y"), crs = 4326)
BP_D_FG_SM_Points <- st_intersection(SM_shapeFile, poly)
library(fst)
library(reshape2)
library(dplyr)
library(data.table)
library(sf)
library(ggplot2)
library(raster)
library(RcppDE)
library(dHRUM)
# Soil Moisture data; (Percentage and coordinate)
Smoisture <- as.data.table(read.fst("vlhkost_od_lukase.fst")) %>% dcast(ID + date ~ variable, value.var = "value")
Smoisture <- as.data.table(Smoisture)
Smoisture$ID <- as.numeric(as.character(Smoisture$ID))
SMcoord <- read.csv("soil_moisture_sensor_info.csv")
Smoisture_mean <- Smoisture[, mean(vlhkost), by = ID][, ID:= as.numeric(as.character(ID))]
Soil_Moisture <- merge(Smoisture_mean, SMcoord, by = "ID" )
names(Soil_Moisture) <-  c("ID", "vlhkost", "X", "Y")
# Create shape file of the Soil Moisture points
SM_shapeFile <- st_as_sf(Soil_Moisture, coords = c("X", "Y"), crs = 4326)
BP_D_FG_SM_Points <- st_intersection(SM_shapeFile, poly)
BP_D_FG_SM_Points <- st_intersection(SM_shapeFile, poly)
setwd("D:/project/Setups_For_Dist_Model/inputs/Soil_input_data")
getwd()
slope <- raster("D:/project/Setups_For_Dist_Model/setups_with_opt/slope/slopeWGS.tif")
poly <- st_read("D:/project/Setups_For_Dist_Model/setups_with_opt/BP_D_FG/GIS_Data/BP_D_FG.shp")
poly <- st_transform(poly,4326)
# GW data; (GW level and coordinate)
GW <- as.data.table(read.fst("vrty.fst")) %>% dcast(ID + date ~ variable, value.var = "value")
GW <- as.data.table(GW)
GWcoord <- read.fst("vrty_info.fst")
GW_mean <- GW[, mean(hladina), by = ID]
GW_Level <- merge(GW_mean, GWcoord, by = "ID")
names(GW_Level) <- c("ID", "hladina", "X", "Y", "name")
# Create shape file of the GW level points
GW_shapeFile <- st_as_sf(GW_Level, coords = c("Y", "X"), crs = 4326)
BP_D_FG_GW_Points <- st_intersection(GW_shapeFile, poly)
# plot(slope)
# plot(poly, add = TRUE)
# plot(GW_shapeFile$geometry, add = TRUE)
# plot(BP_D_FG_GW_Points$geometry, add= TRUE, col = "red")
rm(GWcoord, GW_mean, GW_Level, GW_shapeFile)
BP_D_FG_GW_Points$hladina <- NULL
# getting time series of sensors within each HRU
dtaGW <- as.data.table(merge(GW, BP_D_FG_GW_Points, by = "ID"))
# removing the sensor near the stream
plot(GW["901288001062280", hladina], type = "l")
GW <- GW[!"901288001062280"]
dtaGW <- as.data.table(merge(GW, BP_D_FG_GW_Points, by = "ID"))
HRU1<- dtaGW[OBJECTID== 1, .(date, OBJECTID, hladina)]
HRU2<- dtaGW[OBJECTID== 2, .(date, OBJECTID, hladina)]
HRU3 <- dtaGW[OBJECTID==3, merge(dtaGW[name == "BP III/3", .(date, OBJECTID, hladina)],
dtaGW[name == "BP III/2", .(date, hladina)],
by = "date")][, Means:=(hladina.x + hladina.y)/2]
HRU3[,c("hladina.x", "hladina.y") ] <- NULL
names(HRU3) <- c("date", "OBJECTID", "hladina")
HRU4 <- dtaGW[OBJECTID==4, merge(dtaGW[name == "BP II/3", .(date, OBJECTID, hladina)],
dtaGW[name == "BP II/2", .(date, hladina)],
by = "date")]
HRU4[, Means:=(hladina.x + hladina.y)/2]
HRU4[,c("hladina.x", "hladina.y") ] <- NULL
names(HRU4) <- c("date", "OBJECTID", "hladina")
HRU8 <- dtaGW[OBJECTID== 8, .(date,OBJECTID, hladina)]
GW_TS <- rbind(HRU1, HRU2, HRU3, HRU4, HRU8)
# GW_TS <- dtaGW[, mean(hladina), by = .(OBJECTID, date)]
unique(GW_TS$OBJECTID)
i = 4 # the sensor near the steam has removed
plot(GW_TS[OBJECTID == i, date], GW_TS[OBJECTID== i, hladina], type="l")
# Soil Moisture data; (Percentage and coordinate)
Smoisture <- as.data.table(read.fst("vlhkost_od_lukase.fst")) %>% dcast(ID + date ~ variable, value.var = "value")
Smoisture <- as.data.table(Smoisture)
Smoisture$ID <- as.numeric(as.character(Smoisture$ID))
SMcoord <- read.csv("soil_moisture_sensor_info.csv")
Smoisture_mean <- Smoisture[, mean(vlhkost), by = ID][, ID:= as.numeric(as.character(ID))]
Soil_Moisture <- merge(Smoisture_mean, SMcoord, by = "ID" )
names(Soil_Moisture) <-  c("ID", "vlhkost", "X", "Y")
# Create shape file of the Soil Moisture points
SM_shapeFile <- st_as_sf(Soil_Moisture, coords = c("X", "Y"), crs = 4326)
BP_D_FG_SM_Points <- st_intersection(SM_shapeFile, poly)
# plot(slope)
# plot(poly, add = TRUE)
# plot(SM_shapeFile$geometry, add = TRUE)
# plot(BP_D_FG_SM_Points$geometry, add= TRUE, col = "red")
rm(Smoisture_mean, Soil_Moisture, SMcoord, SM_shapeFile)
BP_D_FG_SM_Points$vlhkost <- NULL
dtaSM <- as.data.table(merge(Smoisture, BP_D_FG_SM_Points, by = "ID"))
SM_TS <- dtaSM[,mean(vlhkost), by = .(OBJECTID, date)]
unique(SM_TS$OBJECTID)
plot(SM_TS[OBJECTID==8,date],SM_TS[OBJECTID==8,V1], type="l")
#polygon number 8
plot(Smoisture[ID==94208522, date], Smoisture[ID==94208522, vlhkost],type = "l")
rm(dtaSM)
GW_scale <- GW_TS[, scale(hladina), by = OBJECTID]
SM_scale <- SM_TS[, scale(V1), by = OBJECTID]
plot(GW_TS[OBJECTID==4, date], GW_scale[OBJECTID==4, V1], type="l")
GW_TS <- cbind(GW_TS, GW_scale$V1)
SM_TS <- cbind(SM_TS, SM_scale$V1)
names(GW_TS) <- c( "date", "OBJECTID", "GW", "stdGW")
names(SM_TS) <- c("OBJECTID", "date", "SM", "stdSM")
SM_TS
setwd("D:/project/Setups_For_Dist_Model/inputs/Soil_input_data")
getwd()
Smoisture <- as.data.table(read.fst("vlhkost_od_lukase.fst")) %>% dcast(ID + date ~ variable, value.var = "value")
ggplot(data = Smoisture) +
geom_line(aes(x = date, y = vlhkost, color = ID)) +
theme(legend.position = 'none')
Smoisture
SM_TS <- readRDS("D:/project/Setups_For_Dist_Model/inputs/Soil_input_data/SoilMoist_Groundwater/SM_TS")
# mean value of soil moisture data
SM_TS <- readRDS("D:/project/Setups_For_Dist_Model/inputs/Soil_input_data/SoilMoist_Groundwater/SM_TS")
dtaDF <- as.data.table(readRDS ("D:/project/Setups_For_Dist_Model/inputs/PT_intput_data/BP_D_FG_2021.rds"))
dtaDF
# mean value of soil moisture data
SM_TS <- readRDS("D:/project/Setups_For_Dist_Model/inputs/Soil_input_data/SoilMoist_Groundwater/SM_TS")
SM_TS
SM_TS
dtaDF
SM_TS
dtaDF
# mean value of soil moisture data
SM_TS <- readRDS("D:/project/Setups_For_Dist_Model/inputs/Soil_input_data/SoilMoist_Groundwater/SM_TS")
SM_TS$stdSM <- NULL
SM_TS
dtaDF <- as.data.table(readRDS ("D:/project/Setups_For_Dist_Model/inputs/PT_intput_data/BP_D_FG_2021.rds"))
SM_TS
name(SM_TS) <- c('HruId', 'date', 'SM')
names(SM_TS) <- c('HruId', 'date', 'SM')
SM_TS
dtaDF
names(SM_TS) <- c('HruId', 'DTM', 'SM')
dta  = merge(SM_TS, dtaDF, by = c('DTM', 'HruId'))
class(SM_TS$HruId)
class(dtaDF$HruId)
dtaDF$HruId = as.numeric(dtaDF$HruId)
class(SM_TS$HruId)
class(dtaDF$HruId)
dta  = merge(SM_TS, dtaDF, by = c('DTM', 'HruId'))
dta
ggplot(data = dta) +
geom_point(aes(x = p, y = SM))
ggplot(data = dta) +
geom_point(aes(x = P, y = SM))
ggplot(data = dta) +
geom_point(aes(x = T, y = SM))
class(SM_TS)
class(dtaDF)
dta  = merge(SM_TS[HruId==1,], dtaDF[HruId==1,], by = c('DTM'))
ggplot(data = dta) +
geom_point(aes(x = P, y = SM))
ggplot(data = dta) +
geom_point(aes(x = T, y = SM))
unique(SM_TS$HruId)
dta  = merge(SM_TS[HruId==3,], dtaDF[HruId==3,], by = c('DTM'))
ggplot(data = dta) +
geom_point(aes(x = P, y = SM))
ggplot(data = dta) +
geom_point(aes(x = T, y = SM))
ggplot(data = dta) +
geom_point(aes(x = log(P), y = SM))
dta  = merge(SM_TS[HruId==4,], dtaDF[HruId==3,], by = c('DTM'))
ggplot(data = dta) +
geom_point(aes(x = P, y = SM))
ggplot(data = dta) +
geom_point(aes(x = T, y = SM))
dta  = merge(SM_TS[HruId==4,], dtaDF[HruId==3,], by = c('DTM'))
ggplot(data = dta) +
geom_point(aes(x = P, y = SM))
ggplot(data = dta) +
geom_point(aes(x = T, y = SM))
unique(SM_TS$HruId)
dta  = merge(SM_TS[HruId==8,], dtaDF[HruId==8,], by = c('DTM'))
ggplot(data = dta) +
geom_point(aes(x = P, y = SM))
ggplot(data = dta) +
geom_point(aes(x = T, y = SM))
# loading the soil moisture data
Smoisture <- as.data.table(read.fst("vlhkost_od_lukase.fst")) %>% dcast(ID + date ~ variable, value.var = "value")
Smoisture
# ploting
ggplot(data = Smoisture) +
geom_line(aes(x = date, y = vlhkost, color = ID)) +
theme(legend.position = 'none')
Smoisture[ID==93148337, ]
dta1 <- Smoisture[ID==93148337, ]
ggplot(data = dta1) +
geom_point(aes(x = t1, y = vlhkost))
ggplot(data = dta1) +
geom_point(aes(x = t2, y = vlhkost))
ggplot(data = dta1) +
geom_point(aes(x = t3, y = vlhkost))
dta  = merge(SM_TS, dtaDF, by = c('DTM'))
write.csv(dta,"C:/Users/Hossein/OneDrive/Desktop/SoiMoisture/SM.csv", row.names = TRUE)
dta  = merge(SM_TS, dtaDF, by = c('DTM', 'HruId'))
write.csv(dta[HruId==1,],"C:/Users/Hossein/OneDrive/Desktop/SoiMoisture/SM.csv", row.names = TRUE)
